AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  This is a demo application, that takes in stock updates, batches them with Kinesis Firehose and then store it in S3.
  Based on the S3 object notifications, Lambda parses the files and group the results based on multiple partitions (retailer, account)
  and only logs the latest stock update per article.
Parameters:
  StockUpdateBucketName:
    Type: String
    Description: 'REQUIRED: Unique S3 bucket name to use for the app.'

Globals:
  Function:
    MemorySize: 1024
    Timeout: 5
    Runtime: python3.11
    Architectures:
    - arm64
    Tracing: Active
  Api:
    TracingEnabled: true

Resources:
  StockUpdateBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: !Ref StockUpdateBucketName
  StockUpdateHandler:
    Type: AWS::Serverless::Function
    Properties:
      Handler: app.lambda_handler
      CodeUri: stockupdates
      ReservedConcurrentExecutions: 1
      Policies:
        S3ReadPolicy:
          BucketName: !Ref StockUpdateBucketName
      Events:
        S3NewObjectEvent:
          Type: S3
          Properties:
            Bucket: !Ref StockUpdateBucket
            Events: s3:ObjectCreated:*
            Filter:
              S3Key:
                Rules:
                - Name: prefix
                  Value: raw/
                - Name: suffix
                  Value: .parquet
      Environment:
        Variables:
          POWERTOOLS_SERVICE_NAME: StockUpdateHandler
          POWERTOOLS_METRICS_NAMESPACE: DemoStockUpdates
          LOG_LEVEL: INFO
      Tags:
        LambdaPowertools: python
      Layers:
      - arn:aws:lambda:eu-central-1:336392948345:layer:AWSSDKPandas-Python311-Arm64:1

  DemoStockUpdatesDeliveryStream:
    Type: AWS::KinesisFirehose::DeliveryStream
    Properties:
      DeliveryStreamName: Demo-StockUpdates
      DeliveryStreamType: DirectPut
      ExtendedS3DestinationConfiguration:
        RoleARN: !GetAtt KinesisFirehoseServiceRole.Arn
        BucketARN: !GetAtt StockUpdateBucket.Arn
        Prefix: raw/year=!{timestamp:yyyy}/month=!{timestamp:MM}/day=!{timestamp:dd}/hour=!{timestamp:HH}/retailer_id=!{partitionKeyFromQuery:retailer_id}/
        ErrorOutputPrefix: error-raw/year=!{timestamp:yyyy}/month=!{timestamp:MM}/day=!{timestamp:dd}/hour=!{timestamp:HH}/!{firehose:error-output-type}
        BufferingHints:
          SizeInMBs: 128
          IntervalInSeconds: 300
        CompressionFormat: UNCOMPRESSED
        EncryptionConfiguration:
          NoEncryptionConfig: NoEncryption
        CloudWatchLoggingOptions:
          Enabled: true
          LogGroupName: "/aws/kinesisfirehose/Demo-StockUpdates"
          LogStreamName: S3Delivery
        ProcessingConfiguration:
          Enabled: true
          Processors:
            - Type: MetadataExtraction
              Parameters:
                - ParameterName: MetadataExtractionQuery
                  ParameterValue: '{retailer_id:.retailerId}'
                - ParameterName: JsonParsingEngine
                  ParameterValue: JQ-1.6
        DataFormatConversionConfiguration:
          SchemaConfiguration:
            RoleARN: !GetAtt KinesisFirehoseServiceRole.Arn
            DatabaseName: demo-stockupdates-db
            TableName: demo-stockupdate-schema
            Region: eu-central-1
            VersionId: LATEST
          InputFormatConfiguration:
            Deserializer:
              OpenXJsonSerDe: {}
          OutputFormatConfiguration:
            Serializer:
              ParquetSerDe: {}
          Enabled: true
        DynamicPartitioningConfiguration:
          RetryOptions:
            DurationInSeconds: 300
          Enabled: true

  KinesisFirehoseServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: firehose.amazonaws.com
            Action: sts:AssumeRole
      Path: /service-role/
      Policies:
        - PolicyName: GluePermissions
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: glue:GetTableVersions
                Resource:
                  - !Join [':', ['arn:aws:glue', !Ref 'AWS::Region', !Ref 'AWS::AccountId', 'catalog']]
                  - !Join [':', ['arn:aws:glue', !Ref 'AWS::Region', !Ref 'AWS::AccountId', 'database/demo-stockupdates-db']]
                  - !Join [':', ['arn:aws:glue', !Ref 'AWS::Region', !Ref 'AWS::AccountId', 'table/demo-stockupdates-db/demo-stockupdate-schema']]
              - Effect: "Allow"
                Action:
                  - "s3:AbortMultipartUpload"
                  - "s3:GetBucketLocation"
                  - "s3:GetObject"
                  - "s3:ListBucket"
                  - "s3:ListBucketMultipartUploads"
                  - "s3:PutObject"
                Resource:
                  - !Sub "arn:aws:s3:::${StockUpdateBucketName}"
                  - !Sub "arn:aws:s3:::${StockUpdateBucketName}/*"
              - Effect: "Allow"
                Action: "logs:PutLogEvents"
                Resource: '*'

  DemoStockUpdatesDatabase:
    Type: AWS::Glue::Database
    Properties:
      CatalogId: !Ref AWS::AccountId
      DatabaseInput:
        Name: demo-stockupdates-db
        CreateTableDefaultPermissions:
          - Principal:
              DataLakePrincipalIdentifier: IAM_ALLOWED_PRINCIPALS
            Permissions:
              - ALL

  DemoStockUpdateSchemaTable:
    Type: AWS::Glue::Table
    Properties:
      CatalogId: !Ref AWS::AccountId
      DatabaseName: !Ref DemoStockUpdatesDatabase
      TableInput:
        Name: demo-stockupdate-schema
        Description: ''
        Retention: 0
        StorageDescriptor:
          Columns:
            - Name: accountid
              Type: int
              Comment: ''
            - Name: retailerid
              Type: string
              Comment: ''
            - Name: channelid
              Type: int
              Comment: ''
            - Name: productid
              Type: string
              Comment: ''
            - Name: articleid
              Type: int
              Comment: ''
            - Name: articlenumber
              Type: int
              Comment: ''
            - Name: lastupdated
              Type: string
              Comment: ''
            - Name: quantity
              Type: int
              Comment: ''
          Location: !GetAtt StockUpdateBucket.Arn
          InputFormat: 'org.apache.hadoop.mapred.TextInputFormat'
          OutputFormat: 'org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat'
          Compressed: false
          SerdeInfo:
            SerializationLibrary: 'org.openx.data.jsonserde.JsonSerDe'
          StoredAsSubDirectories: false
        PartitionKeys: []
        TableType: EXTERNAL_TABLE
        Parameters:
          classification: 'json'

  ApplicationResourceGroup:
    Type: AWS::ResourceGroups::Group
    Properties:
      Name:
        Fn::Sub: ApplicationInsights-SAM-${AWS::StackName}
      ResourceQuery:
        Type: CLOUDFORMATION_STACK_1_0
  ApplicationInsightsMonitoring:
    Type: AWS::ApplicationInsights::Application
    Properties:
      ResourceGroupName:
        Ref: ApplicationResourceGroup
      AutoConfigurationEnabled: 'true'
